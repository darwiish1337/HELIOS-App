// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApimyServices.Data;

#nullable disable

namespace WebApimyServices.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240615093733_AddRatesTables")]
    partial class AddRatesTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserRate", b =>
                {
                    b.Property<int>("RatesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RatesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserRate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "security");
                });

            modelBuilder.Entity("WebApimyServices.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComputedColumnSql("[firstName] +' '+ [lastName]");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("EmailAddress", true);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Job")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("LastFirstnameUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastLastnameUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("LastUserTypeUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasAnnotation("Phone", true);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "security");
                });

            modelBuilder.Entity("WebApimyServices.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAR = "السباكة",
                            NameEN = "Plumbing"
                        },
                        new
                        {
                            Id = 2,
                            NameAR = "كهرباء",
                            NameEN = "Electricity"
                        },
                        new
                        {
                            Id = 3,
                            NameAR = "نجارة",
                            NameEN = "Carpentry"
                        },
                        new
                        {
                            Id = 4,
                            NameAR = "تكييف",
                            NameEN = "HVAC"
                        },
                        new
                        {
                            Id = 5,
                            NameAR = "دهان",
                            NameEN = "Painting"
                        },
                        new
                        {
                            Id = 6,
                            NameAR = "نظافه",
                            NameEN = "cleanliness"
                        },
                        new
                        {
                            Id = 7,
                            NameAR = "لياسة",
                            NameEN = "Plastering"
                        },
                        new
                        {
                            Id = 8,
                            NameAR = "نقل اثاث",
                            NameEN = "Moving furniture"
                        },
                        new
                        {
                            Id = 9,
                            NameAR = "تبليط",
                            NameEN = "flooring"
                        },
                        new
                        {
                            Id = 10,
                            NameAR = "مكافحة حشرات",
                            NameEN = "Anti Bugs"
                        });
                });

            modelBuilder.Entity("WebApimyServices.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityNameAR")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CityNameEN")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Cities", "address");
                });

            modelBuilder.Entity("WebApimyServices.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GoverNameAR")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("GoverNameEN")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Governorates", "address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GoverNameAR = "القاهرة",
                            GoverNameEN = "Cairo"
                        },
                        new
                        {
                            Id = 2,
                            GoverNameAR = "الجيزة",
                            GoverNameEN = "Giza"
                        },
                        new
                        {
                            Id = 3,
                            GoverNameAR = "الأسكندرية",
                            GoverNameEN = "Alexandria"
                        },
                        new
                        {
                            Id = 4,
                            GoverNameAR = "الدقهلية",
                            GoverNameEN = "Dakahlia"
                        },
                        new
                        {
                            Id = 5,
                            GoverNameAR = "البحر الأحمر",
                            GoverNameEN = "Red Sea"
                        },
                        new
                        {
                            Id = 6,
                            GoverNameAR = "البحيرة",
                            GoverNameEN = "Beheira"
                        },
                        new
                        {
                            Id = 7,
                            GoverNameAR = "الفيوم",
                            GoverNameEN = "Fayoum"
                        },
                        new
                        {
                            Id = 8,
                            GoverNameAR = "الغربية",
                            GoverNameEN = "Gharbiya"
                        },
                        new
                        {
                            Id = 9,
                            GoverNameAR = "الإسماعيلية",
                            GoverNameEN = "Ismailia"
                        },
                        new
                        {
                            Id = 10,
                            GoverNameAR = "المنوفية",
                            GoverNameEN = "Menofia"
                        },
                        new
                        {
                            Id = 11,
                            GoverNameAR = "المنيا",
                            GoverNameEN = "Minya"
                        },
                        new
                        {
                            Id = 12,
                            GoverNameAR = "القليوبية",
                            GoverNameEN = "Qaliubiya"
                        },
                        new
                        {
                            Id = 13,
                            GoverNameAR = "الوادي الجديد",
                            GoverNameEN = "New Valley"
                        },
                        new
                        {
                            Id = 14,
                            GoverNameAR = "السويس",
                            GoverNameEN = "Suez"
                        },
                        new
                        {
                            Id = 15,
                            GoverNameAR = "اسوان",
                            GoverNameEN = "Aswan"
                        },
                        new
                        {
                            Id = 16,
                            GoverNameAR = "اسيوط",
                            GoverNameEN = "Assiut"
                        },
                        new
                        {
                            Id = 17,
                            GoverNameAR = "بني سويف",
                            GoverNameEN = "Beni Suef"
                        },
                        new
                        {
                            Id = 18,
                            GoverNameAR = "بورسعيد",
                            GoverNameEN = "Port Said"
                        },
                        new
                        {
                            Id = 19,
                            GoverNameAR = "دمياط",
                            GoverNameEN = "Damietta"
                        },
                        new
                        {
                            Id = 20,
                            GoverNameAR = "الشرقية",
                            GoverNameEN = "Sharkia"
                        },
                        new
                        {
                            Id = 21,
                            GoverNameAR = "جنوب سيناء",
                            GoverNameEN = "South Sinai"
                        },
                        new
                        {
                            Id = 22,
                            GoverNameAR = "كفر الشيخ",
                            GoverNameEN = "Kafr Al sheikh"
                        },
                        new
                        {
                            Id = 23,
                            GoverNameAR = "مطروح",
                            GoverNameEN = "Matrouh"
                        },
                        new
                        {
                            Id = 24,
                            GoverNameAR = "الأقصر",
                            GoverNameEN = "Luxor"
                        },
                        new
                        {
                            Id = 25,
                            GoverNameAR = "قنا",
                            GoverNameEN = "Qena"
                        },
                        new
                        {
                            Id = 26,
                            GoverNameAR = "شمال سيناء",
                            GoverNameEN = "North Sinai"
                        },
                        new
                        {
                            Id = 27,
                            GoverNameAR = "سوهاج",
                            GoverNameEN = "Sohag"
                        });
                });

            modelBuilder.Entity("WebApimyServices.Models.Problems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProblemImg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("WebApimyServices.Models.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RatingValue")
                        .HasColumnType("decimal(3, 2)");

                    b.HasKey("Id");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("ApplicationUserRate", b =>
                {
                    b.HasOne("WebApimyServices.Models.Rate", null)
                        .WithMany()
                        .HasForeignKey("RatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApimyServices.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApimyServices.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApimyServices.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApimyServices.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApimyServices.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApimyServices.Models.ApplicationUser", b =>
                {
                    b.HasOne("WebApimyServices.Models.City", "City")
                        .WithMany("User")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("WebApimyServices.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken", "security");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("City");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("WebApimyServices.Models.City", b =>
                {
                    b.HasOne("WebApimyServices.Models.Governorate", "Governorate")
                        .WithMany("City")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("WebApimyServices.Models.Problems", b =>
                {
                    b.HasOne("WebApimyServices.Models.Category", "Category")
                        .WithMany("Problems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApimyServices.Models.ApplicationUser", "User")
                        .WithMany("Problems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApimyServices.Models.ApplicationUser", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("WebApimyServices.Models.Category", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("WebApimyServices.Models.City", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApimyServices.Models.Governorate", b =>
                {
                    b.Navigation("City");
                });
#pragma warning restore 612, 618
        }
    }
}
