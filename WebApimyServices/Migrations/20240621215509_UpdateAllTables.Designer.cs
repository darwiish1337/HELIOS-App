// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApimyServices.Data;

#nullable disable

namespace WebApimyServices.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240621215509_UpdateAllTables")]
    partial class UpdateAllTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "security");
                });

            modelBuilder.Entity("WebApimyServices.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComputedColumnSql("[firstName] +' '+ [lastName]");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("EmailAddress", true);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastFirstnameUpdateDate")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastLastnameUpdateDate")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("LastUserTypeUpdateDate")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasAnnotation("Phone", true);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("JobId")
                        .IsUnique()
                        .HasFilter("[JobId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "AppData");
                });

            modelBuilder.Entity("WebApimyServices.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories", "AppData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "assets/images/categories/plumbing.png",
                            Name = "السباكة"
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "assets/images/categories/electricity.png",
                            Name = "كهرباء"
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "assets/images/categories/carpentry.png",
                            Name = "نجارة"
                        },
                        new
                        {
                            Id = 4,
                            ImagePath = "assets/images/categories/hvac.png",
                            Name = "تكييف"
                        },
                        new
                        {
                            Id = 5,
                            ImagePath = "assets/images/categories/painting.png",
                            Name = "دهان"
                        },
                        new
                        {
                            Id = 6,
                            ImagePath = "assets/images/categories/cleanliness.png",
                            Name = "نظافه"
                        },
                        new
                        {
                            Id = 7,
                            ImagePath = "assets/images/categories/plastering.png",
                            Name = "لياسة"
                        },
                        new
                        {
                            Id = 8,
                            ImagePath = "assets/images/categories/moving_furniture.png",
                            Name = "نقل اثاث"
                        },
                        new
                        {
                            Id = 9,
                            ImagePath = "assets/images/categories/flooring.png",
                            Name = "تبليط"
                        },
                        new
                        {
                            Id = 10,
                            ImagePath = "assets/images/categories/anti_bugs.png",
                            Name = "مكافحة حشرات"
                        },
                        new
                        {
                            Id = 11,
                            ImagePath = "assets/images/categories/fixing_cars.png",
                            Name = "تصليح سيارات"
                        });
                });

            modelBuilder.Entity("WebApimyServices.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Cities", "address");
                });

            modelBuilder.Entity("WebApimyServices.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Governorates", "address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "القاهرة"
                        },
                        new
                        {
                            Id = 2,
                            Name = "الجيزة"
                        },
                        new
                        {
                            Id = 3,
                            Name = "الأسكندرية"
                        },
                        new
                        {
                            Id = 4,
                            Name = "الدقهلية"
                        },
                        new
                        {
                            Id = 5,
                            Name = "البحر الأحمر"
                        },
                        new
                        {
                            Id = 6,
                            Name = "البحيرة"
                        },
                        new
                        {
                            Id = 7,
                            Name = "الفيوم"
                        },
                        new
                        {
                            Id = 8,
                            Name = "الغربية"
                        },
                        new
                        {
                            Id = 9,
                            Name = "الإسماعيلية"
                        },
                        new
                        {
                            Id = 10,
                            Name = "المنوفية"
                        },
                        new
                        {
                            Id = 11,
                            Name = "المنيا"
                        },
                        new
                        {
                            Id = 12,
                            Name = "القليوبية"
                        },
                        new
                        {
                            Id = 13,
                            Name = "الوادي الجديد"
                        },
                        new
                        {
                            Id = 14,
                            Name = "السويس"
                        },
                        new
                        {
                            Id = 15,
                            Name = "اسوان"
                        },
                        new
                        {
                            Id = 16,
                            Name = "اسيوط"
                        },
                        new
                        {
                            Id = 17,
                            Name = "بني سويف"
                        },
                        new
                        {
                            Id = 18,
                            Name = "بورسعيد"
                        },
                        new
                        {
                            Id = 19,
                            Name = "دمياط"
                        },
                        new
                        {
                            Id = 20,
                            Name = "الشرقية"
                        },
                        new
                        {
                            Id = 21,
                            Name = "جنوب سيناء"
                        },
                        new
                        {
                            Id = 22,
                            Name = "كفر الشيخ"
                        },
                        new
                        {
                            Id = 23,
                            Name = "مطروح"
                        },
                        new
                        {
                            Id = 24,
                            Name = "الأقصر"
                        },
                        new
                        {
                            Id = 25,
                            Name = "قنا"
                        },
                        new
                        {
                            Id = 26,
                            Name = "شمال سيناء"
                        },
                        new
                        {
                            Id = 27,
                            Name = "سوهاج"
                        });
                });

            modelBuilder.Entity("WebApimyServices.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Jobs", "AppData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "assets/images/categories/plumbing.png",
                            Name = "سباك"
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "assets/images/categories/electricity.png",
                            Name = "فني كهرباء"
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "assets/images/categories/carpentry.png",
                            Name = "نجار"
                        },
                        new
                        {
                            Id = 4,
                            ImagePath = "assets/images/categories/hvac.png",
                            Name = "فني التدفئة والتكييف والتبريد"
                        },
                        new
                        {
                            Id = 5,
                            ImagePath = "assets/images/categories/painting.png",
                            Name = "حرفي دهان"
                        },
                        new
                        {
                            Id = 6,
                            ImagePath = "assets/images/categories/cleanliness.png",
                            Name = "عامل نظافه"
                        },
                        new
                        {
                            Id = 7,
                            ImagePath = "assets/images/categories/plastering.png",
                            Name = "عامل بنا"
                        },
                        new
                        {
                            Id = 8,
                            ImagePath = "assets/images/categories/oyster_worker.png",
                            Name = "عامل محاره"
                        },
                        new
                        {
                            Id = 9,
                            ImagePath = "assets/images/categories/moving_furniture.png",
                            Name = "ناقل اثاث"
                        },
                        new
                        {
                            Id = 10,
                            ImagePath = "assets/images/categories/flooring.png",
                            Name = "مبلط"
                        },
                        new
                        {
                            Id = 11,
                            ImagePath = "assets/images/categories/anti_bugs.png",
                            Name = "مكافح حشرات"
                        },
                        new
                        {
                            Id = 12,
                            ImagePath = "assets/images/categories/fixing_cars.png",
                            Name = "مصلح سيارات"
                        });
                });

            modelBuilder.Entity("WebApimyServices.Models.Problems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProblemImg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Problems", "AppData");
                });

            modelBuilder.Entity("WebApimyServices.Models.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FactorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("RatingValue")
                        .HasMaxLength(50)
                        .HasColumnType("decimal(3, 2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FactorId");

                    b.ToTable("Rates", "AppData");
                });

            modelBuilder.Entity("WebApimyServices.Models.RevokedToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RevokedTokens", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApimyServices.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApimyServices.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApimyServices.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApimyServices.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApimyServices.Models.ApplicationUser", b =>
                {
                    b.HasOne("WebApimyServices.Models.City", "City")
                        .WithMany("User")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApimyServices.Models.Job", "Job")
                        .WithOne("User")
                        .HasForeignKey("WebApimyServices.Models.ApplicationUser", "JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsMany("WebApimyServices.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken", "AppData");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("City");

                    b.Navigation("Job");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("WebApimyServices.Models.City", b =>
                {
                    b.HasOne("WebApimyServices.Models.Governorate", "Governorate")
                        .WithMany("City")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("WebApimyServices.Models.Problems", b =>
                {
                    b.HasOne("WebApimyServices.Models.Category", "Category")
                        .WithMany("Problems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApimyServices.Models.ApplicationUser", "User")
                        .WithMany("Problems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApimyServices.Models.Rate", b =>
                {
                    b.HasOne("WebApimyServices.Models.ApplicationUser", "Customer")
                        .WithMany("CustomerRates")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApimyServices.Models.ApplicationUser", "Factor")
                        .WithMany("ReceivedRates")
                        .HasForeignKey("FactorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Factor");
                });

            modelBuilder.Entity("WebApimyServices.Models.ApplicationUser", b =>
                {
                    b.Navigation("CustomerRates");

                    b.Navigation("Problems");

                    b.Navigation("ReceivedRates");
                });

            modelBuilder.Entity("WebApimyServices.Models.Category", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("WebApimyServices.Models.City", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApimyServices.Models.Governorate", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("WebApimyServices.Models.Job", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
